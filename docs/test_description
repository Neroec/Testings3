Модуль xCollision -- проверяет коллизию по горизонтали

Метод XCollision_positive

Тест №1
Цель: проверить правильно ли функция работает при столкновении
Тип: позитивный
Входные данные: 10, 0, 10, 10
Ожидаемый результат: функция вернёт true, т.е. объекты столкнулись

Тест №2
Цель: проверить правильно ли функция работает при отсутствии столкновения
Тип: позитивный
Входные данные: 10, 0, 10, 11
Ожидаемый результат: функция вернёт false, т.е. объекты не столкнулись

Метод XCollision_negative

Тест №1
Цель: проверить работу функции при ширине не больше 0
Тип: негативный
Входные данные: 0, 0, 0, 10
Ожидаемый результат: функция вернёт false, т.е. объекты не столкнулись

Модуль yCollision -- проверяет коллизию по вертикали

Метод YCollision_positive

Тест №1
Цель: проверить правильно ли функция работает при столкновении
Тип: позитивный
Входные данные: 10, 0, 10, 9
Ожидаемый результат: функция вернёт true, т.е. объекты столкнулись

Тест №2
Цель: проверить правильно ли функция работает при отсутствии столкновения
Тип: позитивный
Входные данные: 10, 0, 10, 10
Ожидаемый результат: функция вернёт false, т.е. объекты не столкнулись

Метод YCollision_negative

Тест №1
Цель: проверить работу функции при высоте не больше 0
Тип: негативный
Входные данные: 0, 0, 0, 10
Ожидаемый результат: функция вернёт false, т.е. объекты не столкнулись

Модуль objectsCollision -- определяет новые координаты и скорость по горизонтали Марио

Метод ObjectsCollision_positive

Тест №1
Цель: проверить результат при коллизии справо и yVelocity = 0
Тип: позитивный
Входные данные: 98, 118, 316, 718, -5, 0, вектор с картой
Ожидаемый результат: функция вернёт вектор с правильно определёнными новыми координатами

Тест №2
Цель: проверить результат при коллизии слева и yVelocity = 0
Тип: позитивный
Входные данные: 98, 118, 994, 718, 5, 0, вектор с картой
Ожидаемый результат: функция вернёт вектор с правильно определёнными новыми координатами

Тест №3
Цель: проверить результат при коллизии справо и yVelocity != 0
Тип: позитивный
Входные данные: 98, 118, 316, 719, -5, 1, вектор с картой
Ожидаемый результат: функция вернёт вектор с правильно определёнными новыми координатами

Тест №4
Цель: проверить результат при коллизии слева и yVelocity != 0
Тип: позитивный
Входные данные: 98, 118, 994, 719, 5, 1, вектор с картой
Ожидаемый результат: функция вернёт вектор с правильно определёнными новыми координатами

Тест №5
Цель: проверить результат при коллизии сверху
Тип: позитивный
Входные данные: 98, 118, 666, 719, 0, 1, вектор с картой
Ожидаемый результат: функция вернёт вектор с правильно определёнными новыми координатами

Тест №6
Цель: проверить результат при коллизии снизу
Тип: позитивный
Входные данные: 98, 118, 791, 631, 0, -28, вектор с картой
Ожидаемый результат: функция вернёт вектор с правильно определёнными новыми координатами

Тест №7
Цель: проверить результат при объекте "внутри" Марио
Тип: позитивный
Входные данные: 98, 118, 1166, 483, 5, 1, вектор с картой
Ожидаемый результат: функция вернёт вектор с правильно определёнными новыми(старыми) координатами

Метод ObjectsCollision_negative

Тест №1
Цель: проверить результат при размерах не больше 0
Тип: негативный
Входные данные: -98, -118, 1166, 483, -5, -1, вектор с картой
Ожидаемый результат: функция вернёт вектор с старыми координатами, т.к. коллизии быть не может

Модуль coinsCollision -- проверяет коллизию с монетками и если надо, собирает их

Метод CoinsCollision_positive

Тест №1
Цель: проверить правильно ли функция работает при коллизии с 1 монеткой
Тип: позитивный
Входные данные: 10, 10, 1, 1, вектор с монетками
Ожидаемый результат: функция вернёт новый вектор с монетками, без монетки, с которой произошла колллизия

Тест №2
Цель: проверить правильно ли функция работает при коллизии с несколькими рядом находящимися в векторе монетками
Тип: позитивный
Входные данные: 10, 10, 5, 15, вектор с монетками
Ожидаемый результат: функция вернёт новый вектор с монетками, без монеток, с которыми произошла колллизия

Тест №3
Цель: проверить правильно ли функция работает при коллизии с несколькими отдельно находящимися в векторе монетками
Тип: позитивный
Входные данные: 10, 10, 5, 15, вектор с монетками
Ожидаемый результат: функция вернёт новый вектор с монетками, без монеток, с которыми произошла колллизия

Тест №4
Цель: проверить правильно ли функция работает при отсутствии коллизии с монетками
Тип: позитивный
Входные данные: 10, 10, 0, 0, вектор с монетками
Ожидаемый результат: функция вернёт старый вектор с монетками

Метод CoinsCollision_negative

Тест №1
Цель: проверить правильно ли функция работает при размерах не больше 0
Тип: негативный
Входные данные: -10, -10, 5, 15, вектор с монетками
Ожидаемый результат: функция вернёт старый вектор с монетками, т.к. коллизии быть не может

Модуль marioStatus -- изменяет статус (спрайт) Марио

Метод MarioStatus_positiv

Тест №1
Цель: проверить правильно ли функция работает при движении вправо
Тип: позитивный
Входные данные: 1, 0, "StopRight"
Ожидаемый результат: функция вернёт "MoveRight", т.е. статус изменится правильно

Тест №2
Цель: проверить правильно ли функция работает при движении вправо
Тип: позитивный
Входные данные: 1, 0, "MoveRight"
Ожидаемый результат: функция вернёт "StopRight", т.е. статус изменится правильно

Тест №3
Цель: проверить правильно ли функция работает при движении влево
Тип: позитивный
Входные данные: -1, 0, "StopLeft"
Ожидаемый результат: функция вернёт "MoveLeft", т.е. статус изменится правильно

Тест №4
Цель: проверить правильно ли функция работает при движении влево
Тип: позитивный
Входные данные: -1, 0, "MoveLeft"
Ожидаемый результат: функция вернёт "StopLeft", т.е. статус изменится правильно

Тест №5
Цель: проверить правильно ли функция работает при остановке
Тип: позитивный
Входные данные: 0, 0, "MoveRight"
Ожидаемый результат: функция вернёт "StopRight", т.е. статус изменится правильно

Тест №6
Цель: проверить правильно ли функция работает при остановке
Тип: позитивный
Входные данные: 0, 0, "MoveLeft"
Ожидаемый результат: функция вернёт "StopLeft", т.е. статус изменится правильно

Тест №7
Цель: проверить правильно ли функция работает при движении вправо в воздухе
Тип: позитивный
Входные данные: 1, 1, "StopRight"
Ожидаемый результат: функция вернёт "MoveRight", т.е. статус изменится правильно

Тест №8
Цель: проверить правильно ли функция работает при движении влево в воздухе
Тип: позитивный
Входные данные: -1, 1, "StopLeft"
Ожидаемый результат: функция вернёт "MoveLeft", т.е. статус изменится правильно

Тест №9
Цель: проверить правильно ли функция работает при остановке вправо в воздухе
Тип: позитивный
Входные данные: 0, 1, "StopRight"
Ожидаемый результат: функция вернёт "MoveRight", т.е. статус изменится правильно

Тест №10
Цель: проверить правильно ли функция работает при остановке влево в воздухе
Тип: позитивный
Входные данные: 0, 1, "StopLeft"
Ожидаемый результат: функция вернёт "MoveLeft", т.е. статус изменится правильно

Метод MarioStatus_negativ

Тест №1
Цель: проверить правильно ли функция работает при неправильном статусе Марио
Тип: негативный
Входные данные: 0, 0, "incorrect" - любой неправильный статус
Ожидаемый результат: функция вернёт "StopRight", т.е. статус изменится на изначальный

Модуль objectsStorage -- хранит в себе вектора данных

Метод ObjectsStorage_positive

Тест №1
Цель: проверить правильно ли функция вовращает векторы
Тип: позитивный
Входные данные: 1
Ожидаемый результат: функция вернёт вектор с индексом 1, т.е. саму карту

Тест №2
Цель: проверить правильно ли функция вовращает векторы
Тип: позитивный
Входные данные: 2
Ожидаемый результат: функция вернёт вектор с индексом 2, т.е. вектор с монетками

Метод ObjectsStorage_negative

Тест №1
Цель: проверить что вернёт функция при индексе, которого нет
Тип: негативный
Входные данные: 3
Ожидаемый результат: функция вернёт пустой вектор
